{"version":3,"sources":["endpoints.js","actions/index.js","reducers/index.js","components/MessageCard.js","components/Loader.js","containers/App.js","index.js"],"names":["getMessages","getMembers","fetchMessagesFromServer","fetchMembersInfo","dispatch","type","requests","fetch","endpoints","then","response","json","push","Promise","all","res","messages","members","receivedAt","Date","now","receivedMessages","populateMessagesWithMembersInfo","membersMap","forEach","member","id","populatedMessages","map","m","messageItem","messageId","message","timestamp","userId","firstName","lastName","email","avatar","fullName","formattedTimeString","distanceInWordsToNow","addSuffix","populateMessageWithMemberInfo","sort","a","b","keyA","keyB","initialState","status","rootReducer","state","action","MessageCard","className","key","src","alt","Loader","App","Component","componentDidMount","this","props","componentDidUpdate","prevProps","render","console","log","connect","middleware","thunk","store","createStore","reducer","applyMiddleware","document","getElementById"],"mappings":"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","file":"static/js/main.b879f554.chunk.js","sourcesContent":["\nconst baseUrl = '/json/';\n\nexport default {\n    getMessages: `${baseUrl}messages`,\n    getMembers: `${baseUrl}members`,\n};","\nimport endpoints from '../endpoints'; \n\nexport const REQUEST_MESSAGES = 'REQUEST_MESSAGES'\nexport const RECEIVED_MESSAGES = 'RECEIVED_MESSAGES'\n\nexport const requestPosts = () => ({\n  type: REQUEST_MESSAGES\n})\n\nexport const receivedMessages = (res = []) => ({\n  type: RECEIVED_MESSAGES,\n  messages: res[0],\n  members: res[1],\n  receivedAt: Date.now()\n});\n\nconst fetchMessagesFromServer = (fetchMembersInfo) => dispatch => {\n  dispatch(requestPosts());\n  const requests = [\n    fetch(endpoints.getMessages)\n      .then(response => response.json())\n  ];\n\n  if (fetchMembersInfo) {\n    requests.push(\n      fetch(endpoints.getMembers)\n        .then(response => response.json())\n    );\n  }\n\n  return Promise.all(requests)\n    .then(res => dispatch(receivedMessages(res)))\n}\n\nexport const fetchMessages = (fetchMembersInfo) => (dispatch) => {\n  return dispatch(fetchMessagesFromServer(fetchMembersInfo))\n}\n","import distanceInWordsToNow from 'date-fns/formatDistanceToNow';\n\nimport {\n  REQUEST_MESSAGES, RECEIVED_MESSAGES\n} from '../actions';\n\nconst populateMessageWithMemberInfo = (messageItem, member) => {\n  const {\n    id: messageId, message, timestamp, userId\n  } = messageItem;\n\n  const {\n    firstName,\n    lastName,\n    email,\n    avatar\n  } = member;\n\n  return {\n    fullName: `${firstName} ${lastName}`,\n    email,\n    avatar,\n    messageId,\n    message,\n    timestamp,\n    formattedTimeString: distanceInWordsToNow(new Date(timestamp), { addSuffix: true }),\n    userId\n  }\n}\n\nconst populateMessagesWithMembersInfo = (messages, members) => {\n  // create map of the members for easy retrieval\n  const membersMap = {};\n  members.forEach(member => {\n    membersMap[member.id] = member;\n  });\n\n  let populatedMessages = messages.map(m => populateMessageWithMemberInfo(\n    m,\n    membersMap[m.userId]\n  ));\n  \n    // sort by time\n  populatedMessages.sort((a, b) => {\n    const keyA = new Date(a.timestamp);\n    const keyB = new Date(b.timestamp);\n    // Compare the 2 dates\n    if (keyA < keyB) return -1;\n    if (keyA > keyB) return 1;\n\n    return 0;\n  });\n\n  return {\n    populatedMessages,\n    membersMap\n  };\n}\n\nconst initialState = { messages: [], members: [], status: 'start' };\n\nconst messageStore = (state = initialState, action) => {\n  switch (action.type) {\n    case RECEIVED_MESSAGES:\n      const { populatedMessages: messages,\n        membersMap } = populateMessagesWithMembersInfo(action.messages, action.members);\n      return {\n        ...state,\n        messages,\n        membersMap,\n        status: 'finished'\n      }\n    case REQUEST_MESSAGES:\n      return {\n        ...state,\n        status: 'loading'\n      }\n    default:\n      return state\n  }\n}\n\nconst rootReducer = messageStore;\n\nexport default rootReducer\n","import React from 'react'\nimport './MessageCard.css';\n\nconst MessageCard = ({ message,\n  messageId,\n  fullName,\n  email,\n  avatar,\n  formattedTimeString\n}) => {\n  return (\n    <div className=\"message-card\" key={messageId}>\n      <div className=\"message-card__name\">\n        {fullName}\n      </div>\n      {\n        avatar ? (\n          <div\n            className=\"message-card__img tooltip\"\n          >\n            <div className= \"tooltiptext\">\n              {email}\n            </div>\n            <img src={avatar} alt={email} />\n          </div>\n        ) : null\n      }\n      <div className=\"message-card__content\">\n        {message}\n      </div>\n      <div className=\"message-card__time\">\n        {formattedTimeString}\n      </div>\n    </div>\n  )\n}\n\nexport default MessageCard;\n","import React from 'react';\nimport './Loader.css';\n\nconst Loader = () => (\n    <div className = \"loader\">\n        <div className=\"loader__content\" />\n    </div>\n);\n\nexport default Loader;","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { fetchMessages } from '../actions'\nimport MessageCard from '../components/MessageCard'\nimport Loader from '../components/Loader';\nimport './App.css';\n\nclass App extends Component {\n  componentDidMount() {\n    const { dispatch } = this.props\n    dispatch(fetchMessages(true))\n  }\n\n  componentDidUpdate(prevProps) {\n    // if (prevProps.selectedSubreddit !== this.props.selectedSubreddit) {\n    //   const { dispatch, selectedSubreddit } = this.props\n    //   dispatch(fetchMessages(selectedSubreddit))\n    // }\n  }\n\n  render() {\n    const { messages, status } = this.props\n\n    console.log('-- status --', status);\n\n    return (\n      <div className = \"app\">\n        <div className=\"app__content\">\n          {\n            status === 'loading' ? (\n              <Loader />\n            ): null\n          }\n          {\n            messages.map((m) => (\n              <MessageCard\n                {...m}\n              />\n            ))\n          }\n        </div> \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  const { messages, membersMap, status } = state\n\n  return {\n    messages,\n    membersMap,\n    status\n  }\n}\n\nexport default connect(mapStateToProps)(App)\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport reducer from './reducers'\nimport App from './containers/App'\n\nconst middleware = [ thunk ]\nif (process.env.NODE_ENV !== 'production') {\n  middleware.push(createLogger())\n}\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(...middleware)\n)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}